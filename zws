#!/usr/bin/env python
from geventwebsocket.handler import WebSocketHandler
from gevent import pywsgi
import gevent
import zmq.green as zmq
import argparse
import logging
import json
import time


logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)-15s %(levelname)-8s %(name)-12s %(message)s'
)
logger = logging.getLogger('zws')

parser = argparse.ArgumentParser(description='listen for incoming messages and deal them to subscribers')
parser.add_argument('-l', '--listen', required=True, help='listen-address')
parser.add_argument('-p', '--port', required=True, help='listen-port')
parser.add_argument('-z', '--publisher-socket', required=True, help='zmq-notation of the publish socket, ex: tcp://1.2.3.4:31337')
parser.add_argument('-S', '--ssl', required=False, help='arg: keyfile,certfile', default=None)
parser.add_argument('-H', '--history', required=False, help='history source, ex tcp://1.2.3.4:31337', default=None)
parser.add_argument('-K', '--no-keepalive', required=False, help='do not send keepalives', default=False, action='store_true')
args = parser.parse_args()

ctx = zmq.Context()

def handle_listener(ws, remote_addr, remote_port):
    while True:
        logger.info('<%s:%s> new subscriber', remote_addr, remote_port)
        client_options = ws.read_message()
        if client_options == "undefined":
            logger.info('<%s:%s> legacy-client, subscribing to ALL topics', remote_addr, remote_port)
            client_options = {'history': 1, 'topic':[]}
        else:
            client_options = json.loads(client_options)
        topic_logstring = str(client_options['topic'])
        if len(client_options['topic']) == 0:
            client_options['topic'].append('')
            topic_logstring = '*'
        logger.info('<%s:%s> subscribing to %s', remote_addr, remote_port, topic_logstring)
        if args.history is not None:
            logger.info('<%s:%s> requesting history info', remote_addr, remote_port)
            req_socket = ctx.socket(zmq.REQ)
            req_socket.connect(args.history)
            req_socket.send_json({'length': client_options['history']})
            history_items = req_socket.recv_json()
            req_socket.close()
            logger.info('<%s:%s> sending history info (%i items)', remote_addr, remote_port, len(history_items))
            for history_item in history_items:
                topic = history_item[0]
                topic_found = False
                for client_topic in client_options['topic']:
                    if client_topic == '':
                        topic_found = True
                    elif topic.startswith(client_topic):
                        topic_found = True
                    if topic_found:
                        break
                if not topic_found:
                    continue
                item = json.loads(history_item[1])
                item['topic'] = topic
                item['history'] = True
                ws.send(json.dumps(item))
        zs = ctx.socket(zmq.SUB)
        for topic in client_options['topic']:
            zs.set(zmq.SUBSCRIBE, topic.encode('ascii',errors='ignore'))
        zs.connect(args.publisher_socket)
        last_sent_ping = time.time()
        while True:
            try:
                topic, data = zs.recv_multipart(flags=zmq.NOBLOCK)
                jd = json.loads(data.decode('ascii',errors='ignore'))
                jd['topic'] = topic.decode('ascii', errors='ignore')
                ws.send(json.dumps(jd))
            except zmq.Again:
                gevent.sleep(0.1)
            finally:
                if not args.no_keepalive:
                    cur_time = time.time()
                    if cur_time - last_sent_ping > 1.0:
                        ws.send(json.dumps({'ping': cur_time}))
                        ws.read_message()
                        last_sent_ping = cur_time

def app(environ, start_response):
    handle_listener(environ['wsgi.websocket'], environ['REMOTE_ADDR'], environ['REMOTE_PORT'])

server = None
if args.ssl is not None:
    key, cert = args.ssl.split(',')
    server = pywsgi.WSGIServer((args.listen, int(args.port)), app, handler_class=WebSocketHandler, keyfile=key, certfile=cert)
else:
    server = pywsgi.WSGIServer((args.listen, int(args.port)), app, handler_class=WebSocketHandler)
server.serve_forever()
