#!/usr/bin/env python
import time
import argparse
import util.filemonitor
import logging
import zmq
import json
import threading
import sys
from collections import deque
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)-15s %(levelname)-8s %(name)-12s %(message)s'
)
logger = logging.getLogger('zhistory')

parser = argparse.ArgumentParser(description='archive history for zbus and replay on request')
parser.add_argument('-z', '--publisher-socket', required=True, help='zmq-notation of the socket to follow, ex: tcp://1.2.3.4:1337')
parser.add_argument('-r', '--historian-reqrep', required=True, help='zmq-notation of the reqrep socket, ex: tcp://*:31337')
parser.add_argument('-R', '--historian-length', required=False, help='length of history', default='100')
parser.add_argument('-w', '--write', required=False, help='write history to file', default=False)
args = parser.parse_args()
context = zmq.Context()
lock = threading.Lock()
history = deque(maxlen=int(args.historian_length))


class ZMQListener(threading.Thread):
    def __init__(self):
        super(ZMQListener, self).__init__()
        self._running = False

    def run(self):
        self._running = True
        listen_socket = context.socket(zmq.SUB)
        listen_socket.set(zmq.SUBSCRIBE, b'')
        listen_socket.connect(args.publisher_socket)
        while self._running:
            topic, data = listen_socket.recv_multipart()
            datatuple = (topic.decode('ascii',errors='ignore'), data.decode('ascii',errors='ignore'))
            if args.write is not False:
                try:
                    with open(args.write, 'a') as fp:
                        jsn = json.loads(datatuple[1])
                        jsn['topic'] = datatuple[0]
                        fp.write('%s\n' % json.dumps(jsn))
                except BaseException as be:
                    logger.exception(be)
            lock.acquire()
            history.append(datatuple)
            lock.release()

    def abort(self):
        self._running = False


class HistorianForwarder(threading.Thread):
    def __init__(self):
        super(HistorianForwarder, self).__init__()
        self._running = False

    def run(self):
        self._running = True
        rep_socket = context.socket(zmq.REP)
        rep_socket.bind(args.historian_reqrep)
        while self._running:
            raw_data = rep_socket.recv()
            lock.acquire()
            try:
                histlist = list(history)
                data = json.loads(raw_data.decode('ascii', errors='ignore'))
                if 'length' in data:
                    rep_socket.send_json(histlist[-data['length']:])
                else:
                    rep_socket.send_json(histlist)
            except BaseException as be:
                logger.exception(be)
                rep_socket.send_json([])
            lock.release()

    def abort(self):
        self._running = False


def main():
    zmql = ZMQListener()
    hfwd = HistorianForwarder()
    zmql.daemon = True
    hfwd.daemon = True
    zmql.start()
    hfwd.start()
    while True:
        time.sleep(1)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt as ki:
        sys.exit(0)
    except BaseException as be:
        logger.exception(be)
