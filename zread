#!/usr/bin/env python
import argparse
import util.multifilemonitor
import logging
import zmq
import json
import time
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)-15s %(levelname)-8s %(name)-12s %(message)s'
)
logger = logging.getLogger('zread')

parser = argparse.ArgumentParser(description='tail a logfile and output to a ZeroMQ subscriber')
parser.add_argument('-f', '--file', required=True, help='file to tail, notation topic:file', action='append')
parser.add_argument('-p', '--publish', required=True, help='zmq-notation of the publish socket for zhub')
parser.add_argument('-K', '--no-keepalive', required=False, help='disable keepalives', action='store_const', const=True, default=False)
args = parser.parse_args()

def main():
    context = zmq.Context()
    zhub_socket = context.socket(zmq.PUB)
    if not args.no_keepalive:
        zhub_socket.setsockopt(zmq.TCP_KEEPALIVE, 1)
        zhub_socket.setsockopt(zmq.TCP_KEEPALIVE_IDLE, 60)
    zhub_socket.connect(args.publish)
    targets = {}
    for target in args.file:
        if ':' not in target:
            logger.error('invalid target: %s, skip!', target)
            continue
        topic, file = target.split(':', 1)
        targets[topic] = file
    for result in util.multifilemonitor.MultiFileMonitor(targets).read():
        topic, line = result
        out = None
        try:
            parsed = json.loads(line)
            out = {'timestamp': time.time(), 'json': parsed}
        except:
            out = {'timestamp': time.time(), 'text': line.strip()}
        out_json = json.dumps(out)
        zhub_socket.send(topic.encode('ascii', errors='ignore'), flags=zmq.SNDMORE)
        zhub_socket.send_string(out_json)
        logger.info("sent %s", out_json)

if __name__ == "__main__":
    try:
        main()
    except BaseException as be:
        logger.exception(be)
